# Cursor Rules for Next.js + Tailwind CSS + Supabase + Vercel Stack

## 项目技术栈
- **前端框架**: Next.js 15+ (App Router)
- **样式框架**: Tailwind CSS
- **后端服务**: Supabase (PostgreSQL + Auth + Storage)
- **部署平台**: Vercel
- **开发语言**: TypeScript
- **图标库**: Lucide React

## 代码风格和规范

### TypeScript 规范
- 始终使用 TypeScript，避免 `any` 类型
- 为所有函数参数和返回值定义明确的类型
- 使用接口定义数据结构，特别是 Supabase 表结构
- 优先使用类型推断，但在复杂场景下明确声明类型

### React 组件规范
- 使用函数组件和 React Hooks
- 组件名使用 PascalCase
- 文件名与组件名保持一致
- 优先使用 `const` 声明组件
- 将复杂逻辑提取到自定义 Hook 中

### Next.js App Router 规范
- 使用 App Router 而非 Pages Router
- 页面组件放在 `app/` 目录下
- 使用 `layout.tsx` 定义布局
- API 路由使用 `route.ts` 文件
- 优先使用服务端组件，需要交互时使用 `'use client'`

### Tailwind CSS 规范
- 使用原子化 CSS 类
- 遵循移动端优先的响应式设计 (`sm:`, `md:`, `lg:`, `xl:`)
- 使用语义化的颜色系统 (`blue-500`, `gray-600` 等)
- 组件间距使用 `space-y-*` 和 `gap-*`
- 避免自定义 CSS，优先使用 Tailwind 工具类

### Supabase 集成规范
- 数据库操作统一封装在 `lib/supabase.ts` 中
- 使用 TypeScript 类型定义数据库表结构
- 实现完整的错误处理和加载状态
- 使用 Supabase 的实时功能时注意性能优化
- 敏感操作使用行级安全 (RLS) 策略

## 文件和目录结构

```
project/
├── app/                    # Next.js App Router 页面
│   ├── layout.tsx         # 根布局
│   ├── page.tsx           # 首页
│   ├── admin/             # 管理页面
│   └── api/               # API 路由
├── components/            # 可复用组件
│   ├── ui/                # 基础 UI 组件
│   └── features/          # 功能组件
├── lib/                   # 工具函数和配置
│   ├── supabase.ts        # Supabase 客户端
│   ├── utils.ts           # 通用工具函数
│   └── types.ts           # TypeScript 类型定义
├── public/                # 静态资源
└── styles/                # 全局样式
```

## 编码最佳实践

### 组件设计原则
- 单一职责：每个组件只负责一个功能
- 可复用性：设计通用的 props 接口
- 可测试性：避免复杂的副作用
- 性能优化：使用 `React.memo` 和 `useMemo` 适当优化

### 状态管理
- 优先使用 React 内置的 `useState` 和 `useReducer`
- 复杂状态使用 Context API
- 服务端状态使用 Supabase 实时订阅
- 避免过度使用全局状态

### 错误处理
- 所有异步操作都要有错误处理
- 使用 try-catch 包装 Supabase 操作
- 提供用户友好的错误提示
- 在开发环境中记录详细错误信息

### 性能优化
- 使用 Next.js Image 组件优化图片
- 实现代码分割和懒加载
- 优化 Supabase 查询，避免 N+1 问题
- 使用适当的缓存策略

## 常用代码模式

### Supabase 数据获取
```typescript
const fetchData = async () => {
  try {
    const { data, error } = await supabase
      .from('table_name')
      .select('*')
      .order('created_at', { ascending: false })
    
    if (error) throw error
    return data
  } catch (error) {
    console.error('Error fetching data:', error)
    throw error
  }
}
```

### React Hook 模式
```typescript
const useData = () => {
  const [data, setData] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)
        const result = await fetchData()
        setData(result)
      } catch (err) {
        setError(err)
      } finally {
        setLoading(false)
      }
    }
    
    loadData()
  }, [])
  
  return { data, loading, error }
}
```

### 响应式组件模式
```typescript
const ResponsiveComponent = () => {
  return (
    <div className="flex flex-col lg:flex-row gap-4 p-4">
      <div className="w-full lg:w-1/3">
        {/* 侧边栏内容 */}
      </div>
      <div className="w-full lg:w-2/3">
        {/* 主要内容 */}
      </div>
    </div>
  )
}
```

## 安全考虑

### 环境变量
- 客户端变量使用 `NEXT_PUBLIC_` 前缀
- 敏感信息只在服务端使用
- 使用 `.env.local` 存储本地配置
- 生产环境在 Vercel 中配置环境变量

### 数据验证
- 客户端和服务端都要进行数据验证
- 使用 TypeScript 类型检查
- 对用户输入进行清理和验证
- 实现适当的权限控制

## 部署和维护

### Vercel 部署
- 确保所有环境变量正确配置
- 使用 Vercel 的预览部署功能
- 监控构建时间和包大小
- 配置自定义域名和 SSL

### 代码质量
- 使用 ESLint 和 Prettier 保持代码一致性
- 编写有意义的提交信息
- 定期更新依赖包
- 进行代码审查

## 调试和测试

### 开发调试
- 使用 React DevTools 调试组件
- 使用 Supabase Dashboard 监控数据库
- 使用 Vercel 日志查看部署问题
- 使用浏览器 DevTools 分析性能

### 测试策略
- 组件单元测试使用 Jest + React Testing Library
- E2E 测试使用 Playwright
- 数据库操作测试使用 Supabase 测试环境
- 移动端测试使用真实设备

## 代码生成指导

当我请求生成代码时，请遵循以下原则：

1. **完整性**: 生成完整可运行的代码，包含所有必要的导入和类型定义
2. **最佳实践**: 遵循上述所有规范和模式
3. **错误处理**: 包含适当的错误处理和加载状态
4. **响应式设计**: 确保移动端和桌面端都有良好体验
5. **性能优化**: 考虑性能影响，使用适当的优化技术
6. **可维护性**: 代码结构清晰，易于理解和修改
7. **安全性**: 遵循安全最佳实践，保护用户数据

## 特殊注意事项

- 优先使用 Tailwind CSS 而非自定义样式
- 所有数据库操作都要考虑错误处理
- 移动端体验与桌面端同等重要
- 使用 TypeScript 严格模式
- 遵循 Next.js 13+ App Router 最佳实践
- Supabase 查询要考虑性能和安全性
- 环境变量管理要严格区分客户端和服务端